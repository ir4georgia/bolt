####################################################################
# Otto: Charles Har Analyzer to get EAT info
# M Pierce  mjpierce@techharbor.com
# Created March 5, 2025
# Updates:
# Focused Development for BR-2.0
# 3.7.25 - Update Readme, Add Required folders, Add Example files

import base64
import datetime
import json
import math
import os
import re
import sys

####################################################################
# Global Parameters
####################################################################

remoteHarFile = "HARFiles/BR-App-4.21.25.har"
productTested = "BR-2.0-iPhone"
DEBUG = False   # provides extra logging when true
log4email = []
dirname = os.path.dirname(__file__)
logPath = "Logs"
logName = "ottoBoltLog.txt"
theHar = {}
commentBreaker = "Otto: ############################################################"

####################################################################
# Info Stores
####################################################################
EATUserInfo = []
EATPlaybackInfo = []
EATTrackers = []
FWTrackers = []
SeekAdEvents = []
logSize = ""
isLat = 0

####################################################################
# Functions
####################################################################
def msglog(message):
    print(message)
    global log4email
    log4email.append(message)
    logFileName = os.path.join(dirname, logPath, logName)
    f = open(logFileName, "w")
    for log in log4email:
        f.write(log+'\n')
    f.close()
def convert_size(size_bytes):
   if size_bytes == 0:
       return "0B"
   size_name = ("B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB")
   i = int(math.floor(math.log(size_bytes, 1024)))
   p = math.pow(1024, i)
   s = round(size_bytes / p, 3)
   return "%s %s" % (s, size_name[i])
def importHar(remoteHarFile):
    theTempHar = {}
    try:
        theTempHar = json.load(open(remoteHarFile))
        msglog("Otto:    Successfully Loaded Har File")
        file_size = os.stat(remoteHarFile)
        
        myFileSize = convert_size(file_size.st_size)
        global logSize
        logSize = myFileSize
        msglog("Otto:    File was {0}".format(myFileSize))
    except:
        msglog("Otto:    FAILED to Load Har File..aborting")
        sys.exit()
    msglog(commentBreaker)
    
    return theTempHar
def extractInfo(theHar):
    for i in theHar["log"]["entries"]:
        ####################################################################
        # User Info
        ####################################################################
        try:
            if (re.findall(r'^https?://br-default.br-amer.prd.api.discomax.com/users/me', i["request"]["url"])):
                EATUserInfo.append(i)
        except:
            msglog("Otto: TypeError: MK Manifest")
        ####################################################################
        # PlayBack Info
        ####################################################################
        try:
            if (re.findall(r'^https?://br-default.any-any.prd.api.discomax.com/playback-orchestrator/any/playback-orchestrator/v1/playbackInfo', i["request"]["url"])):
                EATPlaybackInfo.append(i)
        except:
            msglog("Otto: TypeError: MK Manifest Fragments")
        
        ####################################################################
        # BOLT Trackers
        ####################################################################
        try:
            if (re.findall(r'^https?://gmss.use1.prd.api.discomax.com/global-manifest-stitcher-service/tracker/v1/api/trackers/e/token/', i["request"]["url"])):
                EATTrackers.append(i)
        except:
            msglog("Otto: TypeError: MK Manifest")
        ####################################################################
        # FW Trackers
        ####################################################################
        try:
            if (re.findall(r'^https?://2ecd5.v.fwmrm.net/ad/l/1', i["request"]["url"])):
                FWTrackers.append(i)
        except:
            msglog("Otto: TypeError: MK Manifest")
        
    msglog("Otto:    Searched the Log for specified BOLT entries")
    msglog(commentBreaker)
    msglog("Otto: Extraction Results:")
    msglog("Otto: User Info: {0}".format(len(EATUserInfo)))
    msglog("Otto: Playback Info: {0}".format(len(EATPlaybackInfo)))
    msglog("Otto: BOLT Tracker Events: {0}".format(len(EATTrackers)))
    msglog("Otto: FW Tracker Events: {0}".format(len(FWTrackers)))
    msglog(commentBreaker)
def extractUserInfo(EATUserInfo):
    for index, entry in enumerate(EATUserInfo):
        if 'encoding' in entry['response']['content'] and entry['response']['content']['encoding'] == 'base64':
            rawData =  base64.b64decode(entry["response"]["content"]["text"]).decode('utf-8')
        userDict = json.loads(rawData)
        msglog("Otto: User: {0} {1} ID: {2} Type: {3}".format(userDict["data"]["attributes"]["firstName"], userDict["data"]["attributes"]["lastName"], userDict["data"]["id"], userDict["data"]["type"]))
    msglog(commentBreaker)
def getAdTechTrackers(trackers, isLat):
    expected_trackers = []
    for tracker in trackers:
        if isLat == 1:
            if '/global-manifest-stitcher-service/tracker/v1/api/trackers' in tracker:
                expected_trackers.append(tracker)
        else:
            if 'https://2ecd5.v.fwmrm.net/ad/l/1?' in tracker:
                expected_trackers.append(tracker)
    return expected_trackers
def findEvent(tracker, EATTrackers, FWTrackers, isLat):
    foundTracker = False
    if isLat == 0:
        for event in FWTrackers:
            if tracker == event["request"]["url"]:
                foundTracker = True
                break
    else:
        for event in EATTrackers:
            if tracker == event["request"]["url"]:
                foundTracker = True
                break
    return foundTracker
def extractPlaybackInfo(EATPlaybackInfo):
    for index, entry in enumerate(EATPlaybackInfo):
        if 'postData' in entry['request'] and entry['request']['postData']['mimeType'] == 'application/json':
            playBackRequestDict = json.loads(entry['request']['postData']['text'])
        msglog("Otto: Playback Session ID {0}: {1} Privacy: {2} isLat: {3}".format(index, playBackRequestDict["playbackSessionId"], playBackRequestDict["advertisingInfo"]["server"]["iabUSPrivacy"], playBackRequestDict["advertisingInfo"]["server"]["isLimitedAdTracking"]))
        isLat = playBackRequestDict["advertisingInfo"]["server"]["isLimitedAdTracking"]
    msglog("Otto:")
    for index, entry in enumerate(EATPlaybackInfo):
        if 'encoding' in entry['response']['content'] and entry['response']['content']['encoding'] == 'base64':
            rawResponseData =  base64.b64decode(entry["response"]["content"]["text"]).decode('utf-8')
        playBackResponseDict = json.loads(rawResponseData)
        msglog("Otto: Response Session ID {0}: {1}".format(index, playBackResponseDict["ssaiInfo"]["vendorAttributes"]["sessionId"]))
        msglog("Otto: Video ID: {0}".format(playBackResponseDict["videos"][0]["manifestationId"]))
        for index, adbreak in enumerate(playBackResponseDict["ssaiInfo"]["vendorAttributes"]["breaks"]):
            for ad in adbreak["ads"]:
                expected_trackers = []
                msglog("Otto: Ad Break: {0} Ad ID: {1} Ad System: {2}".format(index, ad["adMetadata"]["adId"],ad["adMetadata"]["adSystem"]))
                msglog("Otto: Placement: {0}".format(ad["title"]))
                msglog("Otto: Expected Events")
                if 'events' in ad:
                    if 'impressions' in ad["events"]:
                        expected_trackers = getAdTechTrackers(ad["events"]["impressions"], isLat)
                        for tracker in expected_trackers:
                            trackerFound = findEvent(tracker, EATTrackers, FWTrackers, isLat)
                            msglog("Otto: Found Impression expected tracker: {0}".format(trackerFound))
                            if DEBUG:
                                msglog("Otto: Default: {0}".format(tracker))
                    if 'firstquartiles' in ad["events"]:
                        expected_trackers = getAdTechTrackers(ad["events"]["firstquartiles"], isLat)
                        for tracker in expected_trackers:
                            trackerFound = findEvent(tracker, EATTrackers, FWTrackers, isLat)
                            msglog("Otto: Found 1st Quartile expected tracker: {0}".format(trackerFound))
                            if DEBUG:
                                msglog("Otto: Q1: {0}".format(tracker))
                    if 'midpoints' in ad["events"]:
                        expected_trackers = getAdTechTrackers(ad["events"]["midpoints"], isLat)
                        for tracker in expected_trackers:
                            trackerFound = findEvent(tracker, EATTrackers, FWTrackers, isLat)
                            msglog("Otto: Found 2nd Quartile expected tracker: {0}".format(trackerFound))
                            if DEBUG:
                                msglog("Otto: Q2: {0}".format(tracker))
                    if 'thirdquartiles' in ad["events"]:
                        expected_trackers = getAdTechTrackers(ad["events"]["thirdquartiles"], isLat)
                        for tracker in expected_trackers:
                            trackerFound = findEvent(tracker, EATTrackers, FWTrackers, isLat)
                            msglog("Otto: Found 3rd Quartile expected tracker: {0}".format(trackerFound))
                            if DEBUG:
                                msglog("Otto: Q3: {0}".format(tracker))
                    if 'completes' in ad["events"]:
                        expected_trackers = getAdTechTrackers(ad["events"]["completes"], isLat)
                        for tracker in expected_trackers:
                            trackerFound = findEvent(tracker, EATTrackers, FWTrackers, isLat)
                            msglog("Otto: Found 4th Quartile expected tracker: {0}".format(trackerFound))
                            if DEBUG:
                                msglog("Otto: Q4: {0}".format(tracker))
                else:
                    msglog("Otto: No Events found")
            for event in adbreak["events"]:
                mike="yo"
        msglog("Otto:")
    msglog(commentBreaker)
####################################################################
# Main Program
####################################################################
start = datetime.datetime.now()
msglog(commentBreaker)
msglog("Otto: ##############  Klaatu barada nikto  #######################")
msglog(commentBreaker)
msglog("Otto: BOLT Charles Log Analyzer")
msglog("Otto: EAT Tool - https://backoffice.prd.api.discomax.com/adtech/eat/beam/prd/search")
msglog(commentBreaker)
msglog("Otto: {0} Testing Began at {1}".format(productTested,datetime.datetime.now().strftime("%Y-%m-%d at %I:%M %p")))
msglog("Otto: {0}".format(remoteHarFile))
msglog(commentBreaker)
#####################################################################
msglog("Otto: Step 1: Load the Charles File")
theHar = importHar(remoteHarFile)
#####################################################################
msglog("Otto: Step 2: Extract Info from the Charles Log")
extractInfo(theHar)
#####################################################################
msglog("Otto: Step 3: Extract User Info")
extractUserInfo(EATUserInfo)
#####################################################################
msglog("Otto: Step 4: Extract Playback Info")
extractPlaybackInfo(EATPlaybackInfo)
#####################################################################
end = datetime.datetime.now()
test_duration = end - start
msglog("Otto: Analyzed a {0} File in {1} seconds".format(logSize, test_duration))
msglog("Otto: Go Dawgs!")
msglog(commentBreaker)
